# Highly divisible triangular number
# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

from valkyrie_util.factors import combine_factorizations, divisor_count_factorization, prime_factorization
from valkyrie_util.triangle import nth_triangle_number


def nth_triangle_divisor_count(n: int) -> int:
    '''returns the numbers of divisors for the nth triangle number'''
    # because triangle numbers = n * (n + 1) // 2,
    # either n or n + 1 will be even, and then can be evenly divided by two
    # both parts can be factorized to speed up process instead of the larger number
    if n % 2 == 0:
        prime_fact = combine_factorizations(prime_factorization(n // 2), prime_factorization(n + 1))
    else:
        prime_fact = combine_factorizations(prime_factorization(n), prime_factorization((n + 1) // 2))
    return divisor_count_factorization(prime_fact)


def solve(divisor_count: int = 500) -> str:
    '''Problem 12 - Highly divisible triangular number'''
    n = 1
    while nth_triangle_divisor_count(n) <= divisor_count:
        n += 1
    return str(nth_triangle_number(n))


if __name__ == '__main__':
    print(solve())
