# Distinct powers
# Problem 29
# https://projecteuler.net/problem=29

# Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

# 2**2=4, 2**3=8, 2**4=16, 2**5=32
# 3**2=9, 3**3=27, 3**4=81, 3**5=243
# 4**2=16, 4**3=64, 4**4=256, 4**5=1024
# 5**2=2**5, 5**3=125, 5**4=625, 5**5=3125
# If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

# How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

import itertools
from typing import Dict, Iterable
from project_euler.lib.factors import prime_factorization


def factorization_power(fact: Dict[int, int], exponent: int) -> Dict[int, int]:
    '''returns the factorization raised to the exponent'''
    return {b: e * exponent for b, e in fact.items()}


def factorization_hash(fact: Dict[int, int]) -> str:
    '''creates a unique string for the factorization so it can be put into a set'''
    factors = [f'{b}:{e}'for b, e in fact.items()]
    factors.sort()
    return ','.join(factors)


def hash_power(base: int, exp: int) -> str:
    '''calculates the power and hashes it'''
    return factorization_hash(factorization_power(prime_factorization(base), exp))


def solve(base: Iterable[int] = range(2, 101), exponent: Iterable[int] = range(2, 101)) -> str:
    '''Problem 29 - Distinct powers'''
    distinct_powers = set(hash_power(a, b) for a, b in itertools.product(base, exponent))
    return str(len(distinct_powers))


def test_simplified_version() -> None:
    answer = solve(base=range(2, 6), exponent=range(2, 6))
    assert type(answer) == str
    assert answer == '15'


def test_answer() -> None:
    answer = solve()
    assert type(answer) == str
    assert answer == '9183'


if __name__ == '__main__':
    print(solve())
